From 014bc1744334181c6d30f4f51ecf0b10ea8f1415 Mon Sep 17 00:00:00 2001
From: John Preston <johnprestonmail@gmail.com>
Date: Fri, 27 Nov 2020 09:48:15 +0300
Subject: [PATCH 1/2] Pass through missing ssrc errors.

---
 src/api/peer_connection_interface.h |  2 ++
 src/pc/dtls_srtp_transport.h        | 12 ++++++++++++
 src/pc/jsep_transport_controller.cc |  7 +++++++
 src/pc/jsep_transport_controller.h  |  5 ++++-
 src/pc/peer_connection.cc           | 20 ++++++++++++++++++++
 src/pc/peer_connection.h            |  2 ++
 src/pc/rtp_transport.cc             |  5 +++++
 src/pc/rtp_transport.h              |  4 +++-
 8 files changed, 55 insertions(+), 2 deletions(-)

diff --git a/src/api/peer_connection_interface.h b/src/api/peer_connection_interface.h
index 0ae47b2..b5555f3 100644
--- a/src/api/peer_connection_interface.h
+++ b/src/api/peer_connection_interface.h
@@ -1264,6 +1264,8 @@ class PeerConnectionObserver {
   // The heuristics for defining what constitutes "interesting" are
   // implementation-defined.
   virtual void OnInterestingUsage(int usage_pattern) {}
+
+  virtual void OnErrorDemuxingPacket(uint32_t ssrc) {}
 };
 
 // PeerConnectionDependencies holds all of PeerConnections dependencies.
diff --git a/src/pc/dtls_srtp_transport.h b/src/pc/dtls_srtp_transport.h
index c63a3ca..a7bc938 100644
--- a/src/pc/dtls_srtp_transport.h
+++ b/src/pc/dtls_srtp_transport.h
@@ -63,6 +63,16 @@ class DtlsSrtpTransport : public SrtpTransport {
     active_reset_srtp_params_ = active_reset_srtp_params;
   }
 
+  virtual void OnErrorDemuxingPacket(uint32_t ssrc) override {
+    if (SignalOnErrorDemuxingPacket_) {
+      SignalOnErrorDemuxingPacket_(ssrc);
+    }
+  }
+
+  void SetOnErrorDemuxingPacket(std::function<void(uint32_t)> f) {
+    SignalOnErrorDemuxingPacket_ = std::move(f);
+  }
+
  private:
   bool IsDtlsActive();
   bool IsDtlsConnected();
@@ -96,6 +106,8 @@ class DtlsSrtpTransport : public SrtpTransport {
   absl::optional<std::vector<int>> recv_extension_ids_;
 
   bool active_reset_srtp_params_ = false;
+  
+  std::function<void(uint32_t)> SignalOnErrorDemuxingPacket_ = nullptr;
 };
 
 }  // namespace webrtc
diff --git a/src/pc/jsep_transport_controller.cc b/src/pc/jsep_transport_controller.cc
index 0687a06..7935fc1 100644
--- a/src/pc/jsep_transport_controller.cc
+++ b/src/pc/jsep_transport_controller.cc
@@ -580,6 +580,9 @@ JsepTransportController::CreateDtlsSrtpTransport(
       config_.active_reset_srtp_params);
   dtls_srtp_transport->SignalDtlsStateChange.connect(
       this, &JsepTransportController::UpdateAggregateStates_n);
+  dtls_srtp_transport->SetOnErrorDemuxingPacket([this](uint32_t ssrc) {
+    this->JsepTransportController::ErrorDemuxingPacket_n(ssrc);
+  });
   return dtls_srtp_transport;
 }
 
@@ -1654,6 +1657,10 @@ void JsepTransportController::UpdateAggregateStates_n() {
   }
 }
 
+void JsepTransportController::ErrorDemuxingPacket_n(uint32_t ssrc) {
+  SignalErrorDemuxingPacket.emit(ssrc);
+}
+
 void JsepTransportController::OnRtcpPacketReceived_n(
     rtc::CopyOnWriteBuffer* packet,
     int64_t packet_time_us) {
diff --git a/src/pc/jsep_transport_controller.h b/src/pc/jsep_transport_controller.h
index c966e74..108fdb6 100644
--- a/src/pc/jsep_transport_controller.h
+++ b/src/pc/jsep_transport_controller.h
@@ -268,6 +268,8 @@ class JsepTransportController : public sigslot::has_slots<> {
 
   sigslot::signal1<rtc::SSLHandshakeError> SignalDtlsHandshakeError;
 
+  sigslot::signal1<uint32_t> SignalErrorDemuxingPacket;
+
  private:
   RTCError ApplyDescription_n(bool local,
                               SdpType type,
@@ -414,7 +416,8 @@ class JsepTransportController : public sigslot::has_slots<> {
       DataChannelTransportInterface* data_channel_transport);
 
   void UpdateAggregateStates_n();
-
+  void ErrorDemuxingPacket_n(uint32_t ssrc);
+  
   void OnRtcpPacketReceived_n(rtc::CopyOnWriteBuffer* packet,
                               int64_t packet_time_us);
 
diff --git a/src/pc/peer_connection.cc b/src/pc/peer_connection.cc
index 14281eb..cf8ab7b 100644
--- a/src/pc/peer_connection.cc
+++ b/src/pc/peer_connection.cc
@@ -136,6 +136,7 @@ enum {
   MSG_CREATE_SESSIONDESCRIPTION_FAILED,
   MSG_GETSTATS,
   MSG_REPORT_USAGE_PATTERN,
+  MSG_ON_ERROR_DEMUXING_PACKET,
 };
 
 static const int REPORT_USAGE_PATTERN_DELAY_MS = 60000;
@@ -166,6 +167,13 @@ struct GetStatsMsg : public rtc::MessageData {
   rtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track;
 };
 
+struct OnErrorDemuxingPacketMsg : public rtc::MessageData {
+  explicit OnErrorDemuxingPacketMsg(uint32_t ssrc)
+      : ssrc(ssrc) {}
+
+  uint32_t ssrc;
+};
+
 // Check if we can send |new_stream| on a PeerConnection.
 bool CanAddLocalMediaStream(webrtc::StreamCollectionInterface* current_streams,
                             webrtc::MediaStreamInterface* new_stream) {
@@ -1347,6 +1355,8 @@ bool PeerConnection::Initialize(
       this, &PeerConnection::OnTransportControllerDtlsHandshakeError);
   transport_controller_->SignalIceCandidatePairChanged.connect(
       this, &PeerConnection::OnTransportControllerCandidateChanged);
+  transport_controller_->SignalErrorDemuxingPacket.connect(
+      this, &PeerConnection::OnErrorDemuxingPacket);
 
   stats_.reset(new StatsCollector(this));
   stats_collector_ = RTCStatsCollector::Create(this);
@@ -4511,6 +4521,12 @@ void PeerConnection::OnMessage(rtc::Message* msg) {
       ReportUsagePattern();
       break;
     }
+    case MSG_ON_ERROR_DEMUXING_PACKET: {
+      OnErrorDemuxingPacketMsg* param = static_cast<OnErrorDemuxingPacketMsg*>(msg->pdata);
+      Observer()->OnErrorDemuxingPacket(param->ssrc);
+      delete param;
+      break;
+    }
     default:
       RTC_NOTREACHED() << "Not implemented";
       break;
@@ -6393,6 +6409,10 @@ void PeerConnection::OnTransportControllerCandidateChanged(
   OnSelectedCandidatePairChanged(event);
 }
 
+void PeerConnection::OnErrorDemuxingPacket(uint32_t ssrc) {
+    signaling_thread()->Post(RTC_FROM_HERE, this, MSG_ON_ERROR_DEMUXING_PACKET, new OnErrorDemuxingPacketMsg(ssrc));
+}
+
 void PeerConnection::OnTransportControllerDtlsHandshakeError(
     rtc::SSLHandshakeError error) {
   RTC_HISTOGRAM_ENUMERATION(
diff --git a/src/pc/peer_connection.h b/src/pc/peer_connection.h
index f310257..798cd9c 100644
--- a/src/pc/peer_connection.h
+++ b/src/pc/peer_connection.h
@@ -1091,6 +1091,8 @@ class PeerConnection : public PeerConnectionInternal,
       RTC_RUN_ON(signaling_thread());
   void OnTransportControllerDtlsHandshakeError(rtc::SSLHandshakeError error);
 
+  void OnErrorDemuxingPacket(uint32_t ssrc);
+
   const char* SessionErrorToString(SessionError error) const;
   std::string GetSessionErrorMsg() RTC_RUN_ON(signaling_thread());
 
diff --git a/src/pc/rtp_transport.cc b/src/pc/rtp_transport.cc
index fe7357f..0f4a820 100644
--- a/src/pc/rtp_transport.cc
+++ b/src/pc/rtp_transport.cc
@@ -195,9 +195,14 @@ void RtpTransport::DemuxPacket(rtc::CopyOnWriteBuffer packet,
   if (!rtp_demuxer_.OnRtpPacket(parsed_packet)) {
     RTC_LOG(LS_WARNING) << "Failed to demux RTP packet: "
                         << RtpDemuxer::DescribePacket(parsed_packet);
+    uint32_t ssrc = parsed_packet.Ssrc();
+    OnErrorDemuxingPacket(ssrc);
   }
 }
 
+void RtpTransport::OnErrorDemuxingPacket(uint32_t ssrc) {
+}
+
 bool RtpTransport::IsTransportWritable() {
   auto rtcp_packet_transport =
       rtcp_mux_enabled_ ? nullptr : rtcp_packet_transport_;
diff --git a/src/pc/rtp_transport.h b/src/pc/rtp_transport.h
index 57ad9e5..0992477 100644
--- a/src/pc/rtp_transport.h
+++ b/src/pc/rtp_transport.h
@@ -75,7 +75,9 @@ class RtpTransport : public RtpTransportInternal {
                               RtpPacketSinkInterface* sink) override;
 
   bool UnregisterRtpDemuxerSink(RtpPacketSinkInterface* sink) override;
-
+ 
+  virtual void OnErrorDemuxingPacket(uint32_t ssrc);
+  
  protected:
   // These methods will be used in the subclasses.
   void DemuxPacket(rtc::CopyOnWriteBuffer packet, int64_t packet_time_us);
-- 
2.29.2

