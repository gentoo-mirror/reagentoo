From fcedf11b50f9370b595e86b0e8f5c43ed2d793f4 Mon Sep 17 00:00:00 2001
From: John Preston <johnprestonmail@gmail.com>
Date: Fri, 27 Nov 2020 09:48:15 +0300
Subject: [PATCH] Pass through missing ssrc errors.

---
 src/api/peer_connection_interface.h       |  2 ++
 src/pc/dtls_srtp_transport.h              | 12 ++++++++++++
 src/pc/jsep_transport_controller.cc       |  7 +++++++
 src/pc/jsep_transport_controller.h        |  5 ++++-
 src/pc/peer_connection.cc                 | 10 ++++++++++
 src/pc/peer_connection.h                  |  2 ++
 src/pc/peer_connection_message_handler.cc | 18 ++++++++++++++++++
 src/pc/peer_connection_message_handler.h  |  1 +
 src/pc/rtp_transport.cc                   |  5 +++++
 src/pc/rtp_transport.h                    |  4 +++-
 10 files changed, 64 insertions(+), 2 deletions(-)

diff --git a/src/api/peer_connection_interface.h b/src/api/peer_connection_interface.h
index 92d965b..765b597 100644
--- a/src/api/peer_connection_interface.h
+++ b/src/api/peer_connection_interface.h
@@ -1296,6 +1296,8 @@ class PeerConnectionObserver {
   // The heuristics for defining what constitutes "interesting" are
   // implementation-defined.
   virtual void OnInterestingUsage(int usage_pattern) {}
+
+  virtual void OnErrorDemuxingPacket(uint32_t ssrc) {}
 };
 
 // PeerConnectionDependencies holds all of PeerConnections dependencies.
diff --git a/src/pc/dtls_srtp_transport.h b/src/pc/dtls_srtp_transport.h
index c63a3ca..a7bc938 100644
--- a/src/pc/dtls_srtp_transport.h
+++ b/src/pc/dtls_srtp_transport.h
@@ -63,6 +63,16 @@ class DtlsSrtpTransport : public SrtpTransport {
     active_reset_srtp_params_ = active_reset_srtp_params;
   }
 
+  virtual void OnErrorDemuxingPacket(uint32_t ssrc) override {
+    if (SignalOnErrorDemuxingPacket_) {
+      SignalOnErrorDemuxingPacket_(ssrc);
+    }
+  }
+
+  void SetOnErrorDemuxingPacket(std::function<void(uint32_t)> f) {
+    SignalOnErrorDemuxingPacket_ = std::move(f);
+  }
+
  private:
   bool IsDtlsActive();
   bool IsDtlsConnected();
@@ -96,6 +106,8 @@ class DtlsSrtpTransport : public SrtpTransport {
   absl::optional<std::vector<int>> recv_extension_ids_;
 
   bool active_reset_srtp_params_ = false;
+  
+  std::function<void(uint32_t)> SignalOnErrorDemuxingPacket_ = nullptr;
 };
 
 }  // namespace webrtc
diff --git a/src/pc/jsep_transport_controller.cc b/src/pc/jsep_transport_controller.cc
index 4999f2a..47f381c 100644
--- a/src/pc/jsep_transport_controller.cc
+++ b/src/pc/jsep_transport_controller.cc
@@ -535,6 +535,9 @@ JsepTransportController::CreateDtlsSrtpTransport(
       config_.active_reset_srtp_params);
   dtls_srtp_transport->SignalDtlsStateChange.connect(
       this, &JsepTransportController::UpdateAggregateStates_n);
+  dtls_srtp_transport->SetOnErrorDemuxingPacket([this](uint32_t ssrc) {
+    this->JsepTransportController::ErrorDemuxingPacket_n(ssrc);
+  });
   return dtls_srtp_transport;
 }
 
@@ -1399,6 +1402,10 @@ void JsepTransportController::UpdateAggregateStates_n() {
   }
 }
 
+void JsepTransportController::ErrorDemuxingPacket_n(uint32_t ssrc) {
+  SignalErrorDemuxingPacket.emit(ssrc);
+}
+
 void JsepTransportController::OnRtcpPacketReceived_n(
     rtc::CopyOnWriteBuffer* packet,
     int64_t packet_time_us) {
diff --git a/src/pc/jsep_transport_controller.h b/src/pc/jsep_transport_controller.h
index f0adeed..ae14e28 100644
--- a/src/pc/jsep_transport_controller.h
+++ b/src/pc/jsep_transport_controller.h
@@ -226,6 +226,8 @@ class JsepTransportController : public sigslot::has_slots<> {
 
   sigslot::signal1<rtc::SSLHandshakeError> SignalDtlsHandshakeError;
 
+  sigslot::signal1<uint32_t> SignalErrorDemuxingPacket;
+
  private:
   RTCError ApplyDescription_n(bool local,
                               SdpType type,
@@ -349,7 +351,8 @@ class JsepTransportController : public sigslot::has_slots<> {
   void OnTransportCandidatePairChanged_n(
       const cricket::CandidatePairChangeEvent& event);
   void UpdateAggregateStates_n();
-
+  void ErrorDemuxingPacket_n(uint32_t ssrc);
+  
   void OnRtcpPacketReceived_n(rtc::CopyOnWriteBuffer* packet,
                               int64_t packet_time_us);
 
diff --git a/src/pc/peer_connection.cc b/src/pc/peer_connection.cc
index 9ba7dae..8a6c85c 100644
--- a/src/pc/peer_connection.cc
+++ b/src/pc/peer_connection.cc
@@ -622,6 +622,8 @@ RTCError PeerConnection::Initialize(
       this, &PeerConnection::OnTransportControllerDtlsHandshakeError);
   transport_controller_->SignalIceCandidatePairChanged.connect(
       this, &PeerConnection::OnTransportControllerCandidateChanged);
+  transport_controller_->SignalErrorDemuxingPacket.connect(
+      this, &PeerConnection::OnErrorDemuxingPacket);
 
   transport_controller_->SignalIceConnectionState.AddReceiver(
       [this](cricket::IceConnectionState s) {
@@ -2166,6 +2168,14 @@ void PeerConnection::OnTransportControllerCandidateChanged(
   OnSelectedCandidatePairChanged(event);
 }
 
+void PeerConnection::OnErrorDemuxingPacket(uint32_t ssrc) {
+  message_handler_.PostErrorDemuxingPacket(
+      [this, ssrc]() {
+        RTC_DCHECK_RUN_ON(signaling_thread());
+        Observer()->OnErrorDemuxingPacket(ssrc);
+      });
+}
+
 void PeerConnection::OnTransportControllerDtlsHandshakeError(
     rtc::SSLHandshakeError error) {
   RTC_HISTOGRAM_ENUMERATION(
diff --git a/src/pc/peer_connection.h b/src/pc/peer_connection.h
index 8768ebb..5ee3f71 100644
--- a/src/pc/peer_connection.h
+++ b/src/pc/peer_connection.h
@@ -567,6 +567,8 @@ class PeerConnection : public PeerConnectionInternal,
       RTC_RUN_ON(signaling_thread());
   void OnTransportControllerDtlsHandshakeError(rtc::SSLHandshakeError error);
 
+  void OnErrorDemuxingPacket(uint32_t ssrc);
+
   // Invoked when TransportController connection completion is signaled.
   // Reports stats for all transports in use.
   void ReportTransportStats() RTC_RUN_ON(signaling_thread());
diff --git a/src/pc/peer_connection_message_handler.cc b/src/pc/peer_connection_message_handler.cc
index b3ffcf8..54aa399 100644
--- a/src/pc/peer_connection_message_handler.cc
+++ b/src/pc/peer_connection_message_handler.cc
@@ -28,6 +28,7 @@ enum {
   MSG_CREATE_SESSIONDESCRIPTION_FAILED,
   MSG_GETSTATS,
   MSG_REPORT_USAGE_PATTERN,
+  MSG_ON_ERROR_DEMUXING_PACKET,
 };
 
 struct SetSessionDescriptionMsg : public rtc::MessageData {
@@ -58,6 +59,13 @@ struct GetStatsMsg : public rtc::MessageData {
   rtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track;
 };
 
+struct OnErrorDemuxingPacketMsg : public rtc::MessageData {
+  explicit OnErrorDemuxingPacketMsg(std::function<void()> func)
+    : function(func) {}
+
+  std::function<void()> function;
+};
+
 struct RequestUsagePatternMsg : public rtc::MessageData {
   explicit RequestUsagePatternMsg(std::function<void()> func)
       : function(func) {}
@@ -124,6 +132,12 @@ void PeerConnectionMessageHandler::OnMessage(rtc::Message* msg) {
       delete param;
       break;
     }
+    case MSG_ON_ERROR_DEMUXING_PACKET: {
+      OnErrorDemuxingPacketMsg* param = static_cast<OnErrorDemuxingPacketMsg*>(msg->pdata);
+      param->function();
+      delete param;
+      break;
+    }
     default:
       RTC_NOTREACHED() << "Not implemented";
       break;
@@ -173,4 +187,8 @@ void PeerConnectionMessageHandler::RequestUsagePatternReport(
                                   new RequestUsagePatternMsg(func));
 }
 
+void PeerConnectionMessageHandler::PostErrorDemuxingPacket(std::function<void()> func) {
+  signaling_thread()->Post(RTC_FROM_HERE, this, MSG_ON_ERROR_DEMUXING_PACKET, new OnErrorDemuxingPacketMsg(func));
+}
+
 }  // namespace webrtc
diff --git a/src/pc/peer_connection_message_handler.h b/src/pc/peer_connection_message_handler.h
index 027fbea..b21f837 100644
--- a/src/pc/peer_connection_message_handler.h
+++ b/src/pc/peer_connection_message_handler.h
@@ -43,6 +43,7 @@ class PeerConnectionMessageHandler : public rtc::MessageHandler {
                     StatsCollectorInterface* stats,
                     MediaStreamTrackInterface* track);
   void RequestUsagePatternReport(std::function<void()>, int delay_ms);
+  void PostErrorDemuxingPacket(std::function<void()>);
 
  private:
   rtc::Thread* signaling_thread() const { return signaling_thread_; }
diff --git a/src/pc/rtp_transport.cc b/src/pc/rtp_transport.cc
index fe7357f..0f4a820 100644
--- a/src/pc/rtp_transport.cc
+++ b/src/pc/rtp_transport.cc
@@ -195,9 +195,14 @@ void RtpTransport::DemuxPacket(rtc::CopyOnWriteBuffer packet,
   if (!rtp_demuxer_.OnRtpPacket(parsed_packet)) {
     RTC_LOG(LS_WARNING) << "Failed to demux RTP packet: "
                         << RtpDemuxer::DescribePacket(parsed_packet);
+    uint32_t ssrc = parsed_packet.Ssrc();
+    OnErrorDemuxingPacket(ssrc);
   }
 }
 
+void RtpTransport::OnErrorDemuxingPacket(uint32_t ssrc) {
+}
+
 bool RtpTransport::IsTransportWritable() {
   auto rtcp_packet_transport =
       rtcp_mux_enabled_ ? nullptr : rtcp_packet_transport_;
diff --git a/src/pc/rtp_transport.h b/src/pc/rtp_transport.h
index 57ad9e5..0992477 100644
--- a/src/pc/rtp_transport.h
+++ b/src/pc/rtp_transport.h
@@ -75,7 +75,9 @@ class RtpTransport : public RtpTransportInternal {
                               RtpPacketSinkInterface* sink) override;
 
   bool UnregisterRtpDemuxerSink(RtpPacketSinkInterface* sink) override;
-
+ 
+  virtual void OnErrorDemuxingPacket(uint32_t ssrc);
+  
  protected:
   // These methods will be used in the subclasses.
   void DemuxPacket(rtc::CopyOnWriteBuffer packet, int64_t packet_time_us);
-- 
2.30.0

